03_Mybatis.txt

# Mybatis

 - SQL문만 적으면 자동으로 DB에 연결해 데이터를 꺼내오는 프레임워크
 - 거의 모든 JDBC관련 코드를 자동으로 생성해준다
 - 개발자는 사용할 쿼리의 종류와 SQL문만 정해주면 된다
 
# Mybatis dependencies
 
 	pom.xml : 
	 
 		<!-- spring-jdbc -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
		
		<!-- mybatis -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.5.10</version>
		</dependency>
		
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>2.0.7</version>
		</dependency>
	
	root-context.xml : 		

	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	<mybatis-spring:scan base-pakage="com.ezen.database.mapper" />
			
			
# 피자 오더 폼

# 어노테이션 방식

 @Select("SELECT * FROM pizza ORDER BY id desc")
	public List<Pizza> getList();
	
	@Insert("INSERT INTO pizza(id, name, price, calories) VALUES("
			+ "pizza_id_seq.nextval, #{name}, #{price}, #{calories})")
	public Boolean addPizza(
			@Param("name") String	name,
			@Param("price") Integer price,
			@Param("calories") Double	calories
			);

	@Select("SELECT * FROM pizza where id = #{id}")
	public Pizza findById(@Param("id") long id);
	
	@Delete("DELETE FROM pizza where id = #{id}")
	public Boolean delPizza(@Param("id") long id);
	
	@Update("UPDATE pizza SET name = #{pizza.name}"
			+ ", price = #{pizza.price}"
			+ ", calories = #{pizza.calories}"
			+ " WHERE id = #{pizza.id}")
	public Boolean uptPizza(@Param("pizza") Pizza pizza);

# XML 방식 (선호)

 - mapper interface와 완전히 같은 패키지에 XML 파일을 작성한다.

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ezen.database.mapper.EmployeeMapperXML">
	<select id="getList" resultType="com.ezen.database.dto.Employee">
    	SELECT * FROM employees
	</select>
	<select id="getListByDept" resultType="com.ezen.database.dto.Employee">
    	SELECT * FROM employees WHERE DEPARTMENT_ID = #{department_id}
	</select>
	<select id="getListBetDept" resultType="com.ezen.database.dto.Employee">
		SELECT * FROM employees
		<![CDATA[
			WHERE DEPARTMENT_ID >= #{lowerD} AND DEPARTMENT_ID  <= #{upperD}
		]]>
	</select>
</mapper>

 - 유지 보수가 편함
 - 크기 비교하는 쿼리문 
 	: <![CDATA[		]]>
 	: WHERE DEPARTMENT_ID &gt;= #{lowerD} AND DEPARTMENT_ID  &lt;= #{upperD}

 		

 		
 		
 		
 		
 		
 		
 		
 		
 		
 		